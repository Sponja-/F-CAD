
function f(x) = 2 * x;
print(f(10));

a = (10 + 2) * 10;
print(a ^ 2 * 100);

function factorial(n) = | n > 0 ? n * factorial(n - 1)
						| otherwise 1;

print(factorial(10));

b = [1, 2, 3, 4];
c = [2..6];
d = [2,4..10];
print(b + c + d ^ 2);

function max(list) = | len(list) <= 1 ? list[0]
					 | list[0] > m ? list[0]
					 | otherwise m
					 where m = max(tail(list));

print(max([1, 5, 2, 10, 1]));

function reverse(list) = | len(list) <= 1 ? [list[0]]
						 | otherwise reverse(tail(list)) : list[0];

print(reverse([1, 2, 3, 4]));

function func(x) {
	xx = 2 * x;
	return xx + 1;
}

print(func(1));
print(func(5));

for(i in [1..10]) {
	a = 2 * i;
	print(a);
}

x = 2048;

while(x > 0) {
	x = floor(x / 2);
	print(x);
}

python("x = 10 ** 2");
print(x);

import("example_functions");
print(a(20));
print(b(10));

function sum_numbers(...numbers) {
	result = 0;
	for(n in numbers)
		result = result + n;
	return result;
}

x = [1..1000];

print(sum_numbers(...x));

arr = [1, 2, 3];
arr[0] = 3;
print(arr);

arr = [[1, 2, 3], [4, 5, 6]];
arr[0, 1] = 10;
print(arr);
arr[0][1] = 20;
print(arr);
arr[0] = [1, 2, 3];
print(arr);

print(lower("HELLO WORLD"));

class A {
	function constructor(val) {
		this.val = val;
	}

	function get_double_value() {
		return this.val * 2;
	}
}

obj1 = new A(50);
obj2 = new A(20);
print(obj1.val + obj2.val);
print(obj1.get_double_value());

if(obj1.val == 10) {
	print("no");
}
else if (2 ^ 4 == 15) {
	print("no");
}
else {
	print("yes");
}

class Node {
	function constructor(val) {
		this.val = val;
		this.next = null;
	}
}

class LinkedList {
	function constructor(...numbers) {
		this.head = null;
		this.tail = null;
		for(n in numbers)
			this.append(n);
	}

	function append(n) {
		if(this.head == null) {
			this.head = new Node(n);
			this.tail = this.head;
		}
		else {
			this.tail.next = new Node(n);
			this.tail = this.tail.next;
		}
	}

	function str() {
		s = "";
		s = s : this.head.val;
		node = this.head.next;
		while(node.next != null) {
			s = s : ", " : node.val;
			node = node.next;
		}
		s = s : ", " : node.val;
		return s;
	}


}

l = new LinkedList(...[1..10]);
print(l.str());